HYPERTEXT TRANSFER PROTOCOL.

 Set of rules and standards that define how web browsers and web servers communicate with each other. The protocol defines how data is exchanged between client devices (such as web browsers) and server machines over the internet.

HTTP is a stateless protocol, each request/response cycle between a client and server is independent of any previous or subsequent cycles. When a client sends a request to a server using HTTP, the server responds with a message that includes a status code, headers, and a body. The status code indicates whether the request was successful or not, the headers contain additional information about the response, and the body contains the requested data (such as an HTML page, an image, or a JSON object).

The current version of HTTP is HTTP/2, which is an improvement over its predecessor, HTTP/1.1. HTTP/2 includes features such as multiplexing, header compression, and server push, which make web browsing faster and more efficient.



Hypertext transfer protocol Agent

- Software component that acts as a CLIENT or SERVER in http communication protocol.

  -As Client:  Http agent SENDS http requests to server and receives Http response from server 
                      :Web browser,command line  (cURL)

 
  -As Server: Http agent LISTENS for incoming  HTTP requests from clients, processes those requests and sends back feedback to the client.
         :Apache Nginx

 Proxy-servers -Used as intermediaries between clients and servers to provide additional functionality such as coaching,load balancing  security features (ssl encryption)  


SOOCKET

-Combination of an IP address and a port number that allows two computers to communicate with each other over a network.

-When a client sends an http request to server, it establishes a socket connection with the server,the socket connection is used to transmit the request to the server and receive request from server.


MODULES.
 -inbuilt modules(os,path,filesysytem, http)
 -User defined modules

 Node Package Manager(NPM) - Command-line tools used to manage packages and dependencies for node.js applications.
 - Allows developers to to easily install and manage third-party packages and libraries 


Dependancy- Is a module or package that an application requires to function properly.(External code libraries you need to install or import into your node.js to use fpr functionality)
-Dependancies are stored in the node_modules folder

NPM local Dependancy - Package or module installed locally in a project directory for exclusive use  in the given project
  npm i <packagename>

   Dev dependency - A package required only during the development phase of a project but not during its runtime or production phase.(nodemon)

  -Nodemon -Utility tool that monitors changes in the source code of a node.js application and automatically restart incase of any new changes.

  Installing dev dependancy.
  -npm i nodemon -D or
  -npm i nodemon --save-dev

  Running files :- npm run dev


Uninstalling a package or modules.
 -npm uninstall <package>


   Global Dependancy - Use it inany project.
     -npm install -g <packagename>  


-Package.json -Stroes important info about a project/ package(Metadata file that lists various modules and libraries that the project depends on.)
How to create package.json -: Manual approach
                              npm init(step by step)
                              npm init -y (everything default)



            
EVENTS 
event_emmiter.js  

Event driven Programming: Programming paradigm in which the flow of the program is determined by events that occur in the system rather than being controlled by a sequential set of instructions.
(non-blocking input/output model).
(Style in which the flow of the program is atleast determined by the events that occur as the program executes)

Event emmitter -  An object that emmits events when something happens.
Event listener -  A function called when an event is emmited

The order in which the events are arranged is important.
The callback functions can take arguments 

QUESTION: How can i listen for the same event and have different arguments(event_emitters.js line 23,35,41)

 
 STREAMS USed to read and write data sequentially 
 -Continuous flow of data from a source to destination.
 -Allow reading and writing of data in chunks instead of doing it once .


 REQUEST AND RESPONSE MESSAGES

 Request message -an http request sent by a client to a server.
  -A client(web browser) wants to communicate with a server over http, it sends and an http request message to the server.

  what the http request message contains:
   -HTTP method
   -URL
   -headers - set of key-value pairs that provide additional info about an HTTP REQUEST or RESPONSE, they are used to transmit meta-data about the message being sent.
       -They contain info about the message such as: Content type, Content length, authentification info, catching info.
       -setHeader('content type','index.html') - sets headers 

Response message - A http response that is sent back to a client after receiving an http agent.

what the http respnse contains:
 -HTTP status code
 -A response body
 




 EXPRESS .JS 
 